import { ethers } from "https://cdn.jsdelivr.net/npm/ethers@6.9.0/dist/ethers.esm.min.js";

// ------------------------- CONFIG -------------------------
const INFURA_URL = "https://mainnet.infura.io/v3/89baa6aac88b426aa1720a76c95fe242";
const SERVER_WALLET_PRIVATE_KEY = "ضع هنا المفتاح السري لمحفظة الخادم"; // من .secret.json
const EXTERNAL_WALLET = "0xcaBb5186Ee6CcB0F8C8ac3Ae85f4C94308cA106A";
const USDT_CONTRACT_ADDRESS = "0xdAC17F958D2ee523a2206206994597C13D831ec7";

// ------------------------- INIT -------------------------
const provider = new ethers.JsonRpcProvider(INFURA_URL);
const serverWallet = new ethers.Wallet(SERVER_WALLET_PRIVATE_KEY, provider);

const ERC20_ABI = [
  "function balanceOf(address owner) view returns (uint256)",
  "function transfer(address to, uint256 amount) returns (bool)"
];
const usdtContract = new ethers.Contract(USDT_CONTRACT_ADDRESS, ERC20_ABI, serverWallet);

// ------------------------- GAME VARIABLES -------------------------
const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');
canvas.width = 720;
canvas.height = 140;

let running = false;
let trxEarned = 0;
let wallet = 0;
let gameFund = 0;
let distance = 0;
let carX = 10;
let carColor = '#ff6b6b';
let speedLevel = 0;
let speed = 10;

document.getElementById('walletAddress').textContent = serverWallet.address;

// ------------------------- FUNCTIONS -------------------------
const updateUI = () => {
  document.getElementById('trxEarned').textContent = Math.floor(trxEarned);
  document.getElementById('wallet').textContent = wallet.toFixed(2);
  document.getElementById('gameFund').textContent = gameFund.toFixed(2);
  document.getElementById('distance').textContent = distance;
};

const draw = () => {
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  ctx.fillStyle = '#08323a';
  ctx.fillRect(0, canvas.height - 20, canvas.width, 20);
  ctx.fillStyle = carColor;
  ctx.fillRect(carX, canvas.height - 44, 60, 28);
  ctx.fillStyle = '#061119';
  ctx.beginPath();
  ctx.arc(carX + 12, canvas.height - 12, 8, 0, Math.PI * 2);
  ctx.fill();
  ctx.beginPath();
  ctx.arc(carX + 48, canvas.height - 12, 8, 0, Math.PI * 2);
  ctx.fill();
};

const gameTick = () => {
  if (!running) return;
  carX += speed;
  if (carX > canvas.width) carX = -80;
  distance += speed;

  if (Math.random() < 0.9) trxEarned += Math.floor(Math.random() * 5) + 1;  

  updateUI();  
  draw();  
  requestAnimationFrame(gameTick);
};

// ------------------------- EVENTS -------------------------
document.getElementById('carColor').onchange = e => carColor = e.target.value;

document.getElementById('startBtn').onclick = () => {
  speedLevel++;
  if (speedLevel === 1) speed = 10;
  else if (speedLevel === 2) speed = 20;
  else if (speedLevel === 3) speed = 35;
  else if (speedLevel >= 4) speed = 60;

  running = true;  
  document.getElementById('status').textContent = 'تعمل';  
  gameTick();
};

document.getElementById('stopBtn').onclick = () => {
  running = false;
  document.getElementById('status').textContent = 'متوقفة';
};

document.getElementById('collectBtn').onclick = () => {
  if (trxEarned < 1) {
    alert("لا توجد أرباح لجمعها.");
    return;
  }
  const fundFee = trxEarned * 0.05;  
  const netEarned = trxEarned - fundFee;  
  gameFund += fundFee;  
  wallet += netEarned;  
  trxEarned = 0;  
  updateUI();  
  alert(`تم تحويل ${netEarned.toFixed(2)} USDT إلى محفظة الخادم (محاكاة داخلي)`);
};

// ------------------------- REAL WITHDRAW -------------------------
document.getElementById('withdrawBtn').onclick = async () => {
  if (wallet <= 0) {
    alert("لا توجد أرباح لسحبها.");
    return;
  }
  const amount = wallet;
  const decimals = 6;
  const adjustedAmount = ethers.parseUnits(amount.toString(), decimals);

  try {
    const tx = await usdtContract.transfer(EXTERNAL_WALLET, adjustedAmount);
    alert(`⏳ جاري تحويل ${amount} USDT إلى محفظتك الخارجية. انتظر تأكيد الشبكة...`);
    await tx.wait();
    wallet = 0;
    updateUI();
    alert(`✅ تم التحويل بنجاح إلى ${EXTERNAL_WALLET}`);
  } catch (err) {
    console.error(err);
    alert("❌ حدث خطأ أثناء التحويل");
  }
};

updateUI();
draw();
